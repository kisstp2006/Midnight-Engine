[PLATFORMS]
ALL

[PERMUTATIONS]

RMLUI_MODE

[RENDERSTATE]

BlendingEnabled0 = true
DestBlend0 = Blend_InvSrcAlpha
SourceBlend0 = Blend_One
DestBlendAlpha0 = Blend_InvSrcAlpha
SourceBlendAlpha0 = Blend_One
ScissorTest = true
DepthTest = false
DepthWrite = false
CullMode = CullMode_None
StencilReadMask = 1
StencilWriteMask = 1

#if RMLUI_MODE == RMLUI_MODE_STENCIL_TEST

StencilTest = true
FrontFaceStencilFunc = CompareFunc_Equal

#elif RMLUI_MODE == RMLUI_MODE_STENCIL_SET

StencilTest = true
FrontFaceStencilFunc = CompareFunc_Always
FrontFacePassOp = StencilOp_Replace
WriteMask0 = 0

#endif

[SHADER]

struct PS_IN
{
  float4 Position : SV_Position;
  float2 TexCoord0 : TEXCOORD0;
  float4 Color0 : COLOR0;
};

[VERTEXSHADER]

#include "RmlUiConstants.h"

#if RMLUI_MODE != RMLUI_MODE_STENCIL_SET
  struct VS_IN
  {
    float2 Position : POSITION;
    float2 TexCoord0 : TEXCOORD0;
    float4 Color0 : COLOR0;
  };

  typedef PS_IN VS_OUT;
#endif

float4 GetScreenPosition(float4 inputPos)
{
  float3 screenPosition = mul(UiTransform, inputPos).xyz;
  screenPosition.xy = (screenPosition.xy * ViewportSize.zw) * float2(2.0, -2.0) + float2(-1.0, 1.0);
  return float4(screenPosition, 1.0f);
}

VS_OUT main(VS_IN Input)
{
  VS_OUT RetVal;

  float4 inputPos = float4(Input.Position, 0, 1);
  inputPos.xy += UiTranslation.xy;
  RetVal.Position = GetScreenPosition(inputPos);

  RetVal.TexCoord0 = Input.TexCoord0;
  RetVal.Color0 = Input.Color0;

  return RetVal;
}

[PIXELSHADER]

#include "RmlUiConstants.h"

#if RMLUI_MODE == RMLUI_MODE_STENCIL_SET
  void main()
  {
  }
#else
  Texture2D BaseTexture;
  SamplerState BaseTexture_AutoSampler;

  float4 main(PS_IN Input) : SV_Target
  {
    float4 textureColor = BaseTexture.Sample(BaseTexture_AutoSampler, Input.TexCoord0.xy);
    if (TextureNeedsAlphaMultiplication)
    {
      textureColor.rgb *= textureColor.a;
    }

    return textureColor * Input.Color0;
  }
#endif